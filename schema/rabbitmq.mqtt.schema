%  %% ----------------------------------------------------------------------------
%  %% RabbitMQ MQTT Adapter
%  %%
%  %% See https://github.com/rabbitmq/rabbitmq-mqtt/blob/stable/README.md
%  %% for details
%  %% ----------------------------------------------------------------------------

%  {rabbitmq_mqtt,
%   [%% Set the default user name and password. Will be used as the default login
%    %% if a connecting client provides no other login details.
%    %%
%    %% Please note that setting this will allow clients to connect without
%    %% authenticating!
%    %%
%    %% {default_user, <<"guest">>},
%    %% {default_pass, <<"guest">>},

{mapping, "mqtt.default_user", "rabbitmq_mqtt.default_user", [
    {datatype, string}
]}.

{mapping, "mqtt.default_pass", "rabbitmq_mqtt.default_pass", [
    {datatype, string}
]}.

{translation, "rabbitmq_mqtt.default_user",
fun(Conf) ->
    list_to_binary(cuttlefish:conf_get("mqtt.default_user", Conf))
end}.

{translation, "rabbitmq_mqtt.default_pass",
fun(Conf) ->
    list_to_binary(cuttlefish:conf_get("mqtt.default_pass", Conf))
end}.

%    %% Enable anonymous access. If this is set to false, clients MUST provide
%    %% login information in order to connect. See the default_user/default_pass
%    %% configuration elements for managing logins without authentication.
%    %%
%    %% {allow_anonymous, true},

{mapping, "mqtt.allow_anonymous", "rabbitmq_mqtt.allow_anonymous", 
    [{datatype, {enum, [true, false]}}]}.

%    %% If you have multiple chosts, specify the one to which the
%    %% adapter connects.
%    %%
%    %% {vhost, <<"/">>},

{mapping, "mqtt.vhost", "rabbitmq_mqtt.vhost", [{datatype, string}]}.

{translation, "rabbitmq_mqtt.vhost",
fun(Conf) ->
    list_to_binary(cuttlefish:conf_get("mqtt.vhost", Conf))
end}.

%    %% Specify the exchange to which messages from MQTT clients are published.
%    %%
%    %% {exchange, <<"amq.topic">>},

{mapping, "mqtt.exchange", "rabbitmq_mqtt.exchange", [{datatype, string}]}.

{translation, "rabbitmq_mqtt.exchange",
fun(Conf) ->
    list_to_binary(cuttlefish:conf_get("mqtt.exchange", Conf))
end}.

%    %% Specify TTL (time to live) to control the lifetime of non-clean sessions.
%    %%
%    %% {subscription_ttl, 1800000},
{mapping, "mqtt.subscription_ttl", "rabbitmq_mqtt.subscription_ttl",
    [{datatype, integer}]}.

%    %% Set the prefetch count (governing the maximum number of unacknowledged
%    %% messages that will be delivered).
%    %%
%    %% {prefetch, 10},
{mapping, "mqtt.prefetch", "rabbitmq_mqtt.prefetch",
    [{datatype, integer}]}.

%    %% TCP/SSL Configuration (as per the broker configuration).
%    %%
%    %% {tcp_listeners, [1883]},
%    %% {ssl_listeners, []},

{mapping, "mqtt.listener.tcp.$name", "rabbitmq_mqtt.tcp_listeners",[
    {default, 1883},
    {datatype, [integer, ip]},
    {include_default, "all"}
]}.

{translation, "rabbitmq_mqtt.tcp_listeners",
fun(Conf) ->
    Settings = cuttlefish_variable:filter_by_prefix("mqtt.listener.tcp", Conf),
    [ V || {_, V} <- Settings ]
end}.

{mapping, "mqtt.listener.ssl.$name", "rabbitmq_mqtt.ssl_listeners",[
    {default, 1884},
    {datatype, [integer, ip]},
    {include_default, "all"}
]}.

{translation, "rabbitmq_mqtt.ssl_listeners",
fun(Conf) ->
    Settings = cuttlefish_variable:filter_by_prefix("mqtt.listener.ssl", Conf),
    [ V || {_, V} <- Settings ]
end}.

%    %% Number of Erlang processes that will accept connections for the TCP
%    %% and SSL listeners.
%    %%
%    %% {num_tcp_acceptors, 10},
%    %% {num_ssl_acceptors, 1},

{mapping, "mqtt.num_acceptors.ssl", "rabbitmq_mqtt.num_ssl_acceptors", [
    {default, 1},
    {datatype, integer}
]}.

{mapping, "mqtt.num_acceptors.tcp", "rabbitmq_mqtt.num_tcp_acceptors", [
    {default, 10},
    {datatype, integer}
]}.


%    %% TCP/Socket options (as per the broker configuration).
%    %%
%    %% {tcp_listen_options, [{backlog,   128},
%    %%                       {nodelay,   true}]}
%   ]},

{mapping, "mqtt.tcp_listen_option.$option", "rabbitmq_mqtt.tcp_listen_options", [
    {datatype, [integer, {enum, [true, false]}]}
]}.

{translation, "rabbitmq_mqtt.tcp_listen_options",
fun(Conf) ->
    Settings  = cuttlefish_variable:filter_by_prefix("mqtt.tcp_listen_option", Conf),
    [ V || {_, V} <- Settings ]
end}.

